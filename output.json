[{"ruleId":"ssw26","ruleName":"Boolean Properties must be prefixed by a verb","error":true,"ruleFile":"bool-property-must-be-prefixed-by-a-verb.md","file":"./tests/bool-property-must-be-prefixed-by-a-verb.cs","line":5,"snippet":"public bool CanDrive { get; set; }\r\n\r\npublic bool drive { get; set; }\r\npublic bool drive { get; private set; }"},{"ruleId":"ssw26","ruleName":"Boolean Properties must be prefixed by a verb","error":true,"ruleFile":"bool-property-must-be-prefixed-by-a-verb.md","file":"./tests/bool-property-must-be-prefixed-by-a-verb.cs","line":6,"snippet":"\r\npublic bool drive { get; set; }\r\npublic bool drive { get; private set; }"},{"ruleId":"ssw88","ruleName":"Avoid generic Exceptions","error":false,"ruleFile":"avoid-generic-exception.md","file":"./tests/catch-generic-exception.cs","line":4,"snippet":"try {\r\n  var 1 = 1;\r\n} catch (Exception ex) {\r\n}\r\n\r\n\r"},{"ruleId":"ssw88","ruleName":"Avoid generic Exceptions","error":false,"ruleFile":"avoid-generic-exception.md","file":"./tests/catch-generic-exception.cs","line":10,"snippet":"try {\r\n  var 1 = 1;\r\n} catch (Exception) {\r\n}\r\n\r\n\r"},{"ruleId":"ssw88","ruleName":"Avoid generic Exceptions","error":false,"ruleFile":"avoid-generic-exception.md","file":"./tests/catch-generic-exception.cs","line":16,"snippet":"try {\r\n  var 1 = 1;\r\n} catch(Exception) {\r\n}\r\n\r\n\r"},{"ruleId":"ssw88","ruleName":"Avoid generic Exceptions","error":false,"ruleFile":"avoid-generic-exception.md","file":"./tests/catch-generic-exception.cs","line":22,"snippet":"try {\r\n  var 1 = 1;\r\n} catch(Exception){\r\n}\r\n\r\n\r"},{"ruleId":"ssw88","ruleName":"Avoid generic Exceptions","error":false,"ruleFile":"avoid-generic-exception.md","file":"./tests/catch-generic-exception.cs","line":28,"snippet":"try {\r\n  var 1 = 1;\r\n} catch(Exception){}\r\n"},{"ruleId":"ssw26","ruleName":"No empty catch blocks","error":true,"ruleFile":"no-empty-catch.md","file":"./tests/catch-generic-exception.cs","line":4,"snippet":"try {\r\n  var 1 = 1;\r\n} catch (Exception ex) {\r\n}\r\n\r\n\r"},{"ruleId":"ssw26","ruleName":"No empty catch blocks","error":true,"ruleFile":"no-empty-catch.md","file":"./tests/catch-generic-exception.cs","line":10,"snippet":"try {\r\n  var 1 = 1;\r\n} catch (Exception) {\r\n}\r\n\r\n\r"},{"ruleId":"ssw26","ruleName":"No empty catch blocks","error":true,"ruleFile":"no-empty-catch.md","file":"./tests/catch-generic-exception.cs","line":16,"snippet":"try {\r\n  var 1 = 1;\r\n} catch(Exception) {\r\n}\r\n\r\n\r"},{"ruleId":"ssw26","ruleName":"No empty catch blocks","error":true,"ruleFile":"no-empty-catch.md","file":"./tests/catch-generic-exception.cs","line":22,"snippet":"try {\r\n  var 1 = 1;\r\n} catch(Exception){\r\n}\r\n\r\n\r"},{"ruleId":"ssw26","ruleName":"No empty catch blocks","error":true,"ruleFile":"no-empty-catch.md","file":"./tests/catch-generic-exception.cs","line":28,"snippet":"try {\r\n  var 1 = 1;\r\n} catch(Exception){}\r\n"},{"ruleId":"ssw26","ruleName":"Use String.Empty instead of \"\"","error":true,"ruleFile":"use-string-empty.md","file":"./tests/catch-generic-exception.cs","line":4,"snippet":"try {\r\n  var 1 = 1;\r\n} catch (Exception ex) {\r\n}\r\n\r\n\r"},{"ruleId":"ssw26","ruleName":"Use String.Empty instead of \"\"","error":true,"ruleFile":"use-string-empty.md","file":"./tests/catch-generic-exception.cs","line":10,"snippet":"try {\r\n  var 1 = 1;\r\n} catch (Exception) {\r\n}\r\n\r\n\r"},{"ruleId":"ssw26","ruleName":"Use String.Empty instead of \"\"","error":true,"ruleFile":"use-string-empty.md","file":"./tests/catch-generic-exception.cs","line":16,"snippet":"try {\r\n  var 1 = 1;\r\n} catch(Exception) {\r\n}\r\n\r\n\r"},{"ruleId":"ssw26","ruleName":"Use String.Empty instead of \"\"","error":true,"ruleFile":"use-string-empty.md","file":"./tests/catch-generic-exception.cs","line":22,"snippet":"try {\r\n  var 1 = 1;\r\n} catch(Exception){\r\n}\r\n\r\n\r"},{"ruleId":"ssw26","ruleName":"Use String.Empty instead of \"\"","error":true,"ruleFile":"use-string-empty.md","file":"./tests/catch-generic-exception.cs","line":28,"snippet":"try {\r\n  var 1 = 1;\r\n} catch(Exception){}\r\n"},{"ruleId":"ssw26","ruleName":"No empty catch blocks","error":true,"ruleFile":"no-empty-catch.md","file":"./tests/no-empty-catch.cs","line":3,"snippet":"try {\r\n  var 1 = 1;\r\n} catch (IOException ex) {\r\n}\r\n\r\ntry {\r"},{"ruleId":"ssw26","ruleName":"No empty catch blocks","error":true,"ruleFile":"no-empty-catch.md","file":"./tests/no-empty-catch.cs","line":8,"snippet":"try {\r\n  var 1 = 1;\r\n} catch(IOException ex){\r\n}\r\n\r\ntry {\r"},{"ruleId":"ssw26","ruleName":"No empty catch blocks","error":true,"ruleFile":"no-empty-catch.md","file":"./tests/no-empty-catch.cs","line":13,"snippet":"try {\r\n  var 1 = 1;\r\n} catch(IOException ex){}\r\n\r\ntry {\r\n  var 1 = 1;\r"},{"ruleId":"ssw26","ruleName":"No empty catch blocks","error":true,"ruleFile":"no-empty-catch.md","file":"./tests/no-empty-catch.cs","line":17,"snippet":"try {\r\n  var 1 = 1;\r\n} catch(IOException){}"},{"ruleId":"ssw26","ruleName":"Use String.Empty instead of \"\"","error":true,"ruleFile":"use-string-empty.md","file":"./tests/no-empty-catch.cs","line":3,"snippet":"try {\r\n  var 1 = 1;\r\n} catch (IOException ex) {\r\n}\r\n\r\ntry {\r"},{"ruleId":"ssw26","ruleName":"Use String.Empty instead of \"\"","error":true,"ruleFile":"use-string-empty.md","file":"./tests/no-empty-catch.cs","line":8,"snippet":"try {\r\n  var 1 = 1;\r\n} catch(IOException ex){\r\n}\r\n\r\ntry {\r"},{"ruleId":"ssw26","ruleName":"Use String.Empty instead of \"\"","error":true,"ruleFile":"use-string-empty.md","file":"./tests/no-empty-catch.cs","line":13,"snippet":"try {\r\n  var 1 = 1;\r\n} catch(IOException ex){}\r\n\r\ntry {\r\n  var 1 = 1;\r"},{"ruleId":"ssw26","ruleName":"Use String.Empty instead of \"\"","error":true,"ruleFile":"use-string-empty.md","file":"./tests/no-empty-catch.cs","line":17,"snippet":"try {\r\n  var 1 = 1;\r\n} catch(IOException){}"},{"ruleId":"ssw89","ruleName":"The <title>, <h1>, and <h2> tags need to be descriptive","error":false,"ruleFile":"title-h1-h2-must-be-descriptive.md","file":"./tests/title-h1-h2-must-be-descriptive.html","line":"6","snippet":"  <meta charset=\"UTF-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <title>Document</title>\r\n</head>\r\n<body>\r\n  \r\n</body>\r\n</html>"},{"ruleId":"ssw88","ruleName":"Disallow Null Comparisons (no-eq-null)","error":true,"ruleFile":"no-null-comparison.md","file":"./tests/use-tripple-equals.js","line":"3","snippet":"\r\nfunction Hello(name) {\r\n\tif (d == null) return true;\r\n\tif (d != null) return true;\r\n}\r\n"},{"ruleId":"ssw88","ruleName":"Disallow Null Comparisons (no-eq-null)","error":true,"ruleFile":"no-null-comparison.md","file":"./tests/use-tripple-equals.js","line":"4","snippet":"function Hello(name) {\r\n\tif (d == null) return true;\r\n\tif (d != null) return true;\r\n}\r\n"},{"ruleId":"ssw9","ruleName":"User triple equals instead of double","error":false,"ruleFile":"use-triple-equal.md","file":"./tests/use-tripple-equals.js","line":"3","snippet":"\r\nfunction Hello(name) {\r\n\tif (d == null) return true;\r\n\tif (d != null) return true;\r\n}\r\n"},{"ruleId":"ssw9","ruleName":"User triple equals instead of double","error":false,"ruleFile":"use-triple-equal.md","file":"./tests/use-tripple-equals.js","line":"4","snippet":"function Hello(name) {\r\n\tif (d == null) return true;\r\n\tif (d != null) return true;\r\n}\r\n"},{"ruleId":"ssw9","ruleName":"User triple equals instead of double","error":false,"ruleFile":"use-triple-equal.md","file":"./tests/use-tripple-equals.ts","line":"4","snippet":"const d: string = '333';\r\nfunction Hello(name) {\r\n\tif (d == '333') return true;\r\n\tif (d != '333') return true;\r\n}\r\n"},{"ruleId":"ssw9","ruleName":"User triple equals instead of double","error":false,"ruleFile":"use-triple-equal.md","file":"./tests/use-tripple-equals.ts","line":"5","snippet":"function Hello(name) {\r\n\tif (d == '333') return true;\r\n\tif (d != '333') return true;\r\n}\r\n"}]
